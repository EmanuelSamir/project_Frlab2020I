#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState

from markers import *
from projfunctions import *

rospy.init_node("testForwardKinematics")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
bmarker = BallMarker(color['GREEN'])

#dimensions
l=np.array([0.022,1.5,0.502,0.6,0.4,0.155,0.07,0.14])#0.4
# Joint names
jnames = ['pan_joint', 'tilt_joint', 'joint10','joint11', 'jc1', 'jc2','jc3']
# Joint Configuration
#q = np.array([1.40, 0.74, 1.65, -0.56, 0.43, 0.35, -0.62])
q = np.array([1,-pi/4,1,pi/2,-1,-2,pi/8])

# End effector with respect to the base
T = fkine(l,q)
print( np.round(T, 3) )
bmarker.position(T)

# Object (message) whose type is JointState
jstate = JointState()
# Set values to the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

# Loop rate (in Hz)
rate = rospy.Rate(100)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    # Wait for the next iteration
    rate.sleep()
