#!/usr/bin/env python
#

from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState

from markers import *
from projfunctions import *

# Archivos donde se almacenara los datos
fqact = open("/tmp/qactual.dat", "w")
fqdes = open("/tmp/qdeseado.dat", "w")
fxact = open("/tmp/xactual.dat", "w")
fxdes = open("/tmp/xdeseado.dat", "w")

# Initialize the node
rospy.init_node("testKineControlPose")
print('starting motion ... ')

# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# Markers for the current and desired positions
bmarker_current  = FrameMarker()
bmarker_desired = FrameMarker(0.5)

# Joint names
jnames = ['pan_joint', 'tilt_joint', 'joint10', 'joint11', 'jc1', 'jc2',  'jc3']

qdes = np.array([0., 0., 0., 0., 0., 0., 0. ])

# Desired pose
T = fkine(qdes)
qd = rot2quat(T[0:3,0:3])
# Find an xd that the robot can reach
xdes = np.array([T[0,3], T[1,3], T[2,3], qd[0], qd[1], qd[2], qd[3]])

# Initial configuration 
q0  = np.array([0.0, 0.2, 0.3, 0.6, 1.0, 0.4, 0.5])

# Resulting initial pose (end effector with respect to the base link)
T = fkine(q0)
x0 = TF2xyzquat(T)

# Markers for the current and the desired pose
bmarker_current.setPose(x0)
bmarker_desired.setPose(xdes)

# Instance of the JointState message
jstate = JointState()

# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames

# Add the head joint value (with value 0) to the joints
jstate.position = q0

# Frequency (in Hz) and control period 
freq = 50
dt = 1.0/freq
rate = rospy.Rate(freq)

# Initial joint configuration
q = copy(q0)
x = copy(x0)
quat = x[3:7]

# Initialize the derror vector (derivative of the error)
derror = np.zeros(7)
dt = 1/20.
t = 0.0
# Main loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Kinematic control law for the pose (complete here)
    # --------------------------------------------------
    kp = 15.
    ka = 0.9
    T = fkine(q)
    x = T[0:3,3]
    Q = rot2quat(T[0:3,0:3])
    e = np.hstack(((x-xdes[0:3]), quatError(xdes[3:7], Q)))
 
    if np.linalg.norm(e) > 0.01:
        v = -kp*e 
        Jac = jacobian_pose(q)
        pinv = np.dot(Jac.T, np.linalg.inv(np.dot(Jac,Jac.T) + ka**2 * np.identity(7)))
        qdot = np.dot(pinv, v)
        q = q + dt*qdot
    else:
        print("Reached to desire position")

    # Almacenamiento de datos
    fxact.write(str(t)+','+str(x[0])+','+str(x[1])+','+str(x[2])+','+str(Q[0])+','+str(Q[1])+','+str(Q[2])+','+str(Q[3])+'\n')
    fxdes.write(str(t)+','+str(xdes[0])+','+str(xdes[1])+','+str(xdes[2])+','+str(xdes[3])+','+str(xdes[4])+','+str(xdes[5])+','+str(xdes[6])+'\n')
    fqact.write(str(t)+','+str(q[0])+','+str(q[1])+','+ str(q[2])+
                ','+ str(q[3])+','+str(q[4])+','+str(q[5])+','+str(q[6])+'\n ')
    fqdes.write(str(t)+','+str(qdes[0])+','+str(qdes[1])+','+ str(qdes[2])+
                ','+ str(qdes[3])+','+str(qdes[4])+','+str(qdes[5])+','+str(qdes[6])+'\n ')

    # -----------------------------
    t = t + dt
    # Current configuration transformation to current position
    T = fkine(q)
    x = TF2xyzquat(T)
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.setPose(xdes)
    bmarker_current.setPose(x)
    # Wait for the next iteration
    rate.sleep()
